'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Counter = function (_React$Component) {
  _inherits(Counter, _React$Component);

  function Counter() {
    _classCallCheck(this, Counter);

    var _this = _possibleConstructorReturn(this, (Counter.__proto__ || Object.getPrototypeOf(Counter)).call(this));

    _this.state = {
      counter: 0,
      lastMessage: '',
      sw1: null,
      sw2: null
    };
    return _this;
  }

  _createClass(Counter, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'h2',
          null,
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-reset',
              type: 'button',
              onClick: this.onReset.bind(this)
            },
            'Reset counter (DELETE /counter)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-increment',
              type: 'button',
              onClick: this.onIncrement.bind(this, 1, 0)
            },
            'Increment counter (POST /counter)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-increment2',
              type: 'button',
              onClick: this.onIncrement.bind(this, 2, 0)
            },
            'Increment counter x 2 (POST /counter?by=2)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-increment-delay',
              type: 'button',
              onClick: this.onIncrement.bind(this, 1, 1000)
            },
            'Increment counter (POST /counter?delay=1000)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-increment2-delay',
              type: 'button',
              onClick: this.onIncrement.bind(this, 2, 1000)
            },
            'Increment counter x 2 (POST /counter?by=2&delay=1000)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-refresh',
              type: 'button',
              onClick: this.onRefreshCounter.bind(this)
            },
            'Refresh counter (GET /counter)'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-test-get',
              type: 'button',
              onClick: this.onTestGet.bind(this)
            },
            'Test ajax get'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-test-fetch',
              type: 'button',
              onClick: this.onTestFetch.bind(this)
            },
            'Test fetch'
          ),
          _react2.default.createElement(
            'button',
            {
              'data-test': 'button-test-post-with-error',
              type: 'button',
              onClick: this.onTestPostWithError.bind(this)
            },
            'Post, will return 402'
          )
        ),
        _react2.default.createElement(
          'h3',
          null,
          'Counter value:',
          _react2.default.createElement(
            'span',
            { 'data-test': 'counter-label' },
            this.state.counter,
            ' '
          )
        ),
        _react2.default.createElement(
          'h3',
          null,
          'Last result:',
          _react2.default.createElement(
            'span',
            { 'data-test': 'result-text', id: 'result' },
            this.state.lastMessage,
            ' '
          )
        ),
        _react2.default.createElement(
          'h2',
          null,
          'Example of difference between fetch and $ (ajax)'
        ),
        _react2.default.createElement(
          'p',
          { 'data-test': 'sw1' },
          JSON.stringify(this.state.sw1)
        ),
        _react2.default.createElement(
          'p',
          { 'data-test': 'sw2' },
          JSON.stringify(this.state.sw2)
        )
      );
    }
  }, {
    key: 'onReset',
    value: function onReset() {
      var _this2 = this;

      _jquery2.default.ajax({
        type: 'DELETE',
        url: '/counter',
        complete: function complete(data) {
          _this2.setState({
            lastMessage: data.responseText
          });
        }
      });
    }
  }, {
    key: 'onIncrement',
    value: function onIncrement(increment, delay) {
      var _this3 = this;

      var url = '/counter?increment=' + increment + '&delay=' + delay;
      _jquery2.default.post(url, function (data) {
        _this3.setState({
          lastMessage: data
        });
      });
    }
  }, {
    key: 'onRefreshCounter',
    value: function onRefreshCounter() {
      var _this4 = this;

      _jquery2.default.get('/counter', function (data) {
        _this4.setState({
          counter: data
        });
      });
    }
  }, {
    key: 'onTestGet',
    value: function onTestGet() {
      var _this5 = this;

      _jquery2.default.get('https://swapi.co/api/people/2/', function (data) {
        _this5.setState({
          sw2: data
        });
      });
    }
  }, {
    key: 'onTestFetch',
    value: function onTestFetch() {
      var _this6 = this;

      var fetchthing = fetch('https://swapi.co/api/people/2/').then(function (response) {
        return response.json();
      }).then(function (myJson) {
        _this6.setState({
          sw1: myJson
        });
      });
    }
  }, {
    key: 'onTestPostWithError',
    value: function onTestPostWithError() {
      var self = this;
      _jquery2.default.post('/error', function (data) {
        debugger; // shouldn't hit this
      }).fail(function (response) {
        self.setState({
          lastMessage: response.status + ', ' + response.responseText
        });
      });
    }
  }]);

  return Counter;
}(_react2.default.Component);

exports.default = Counter;